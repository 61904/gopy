#!/usr/bin/env python

# Copyright 2011 Julian Phillips.  All rights reserved.
# Use of this source code is governed by a BSD-style
# license that can be found in the LICENSE file.

import re
import subprocess
import threading


header = """// Copyright 2011 Julian Phillips.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// This file is automatically generated.  To regenerate:
//   ./gen_exc.py | gofmt > exc.go

package py

// #include "utils.h"
import "C"
"""

exc_re = re.compile('^extern .* PyExc_(?P<name>\w+);$')


def get_ffi_flags():
    cmd = ['pkg-config', '--cflags', 'libffi']
    p = subprocess.Popen(cmd, stdout=subprocess.PIPE)
    out, err = p.communicate()
    return out.strip().split(' ')

def process(inp):
    exceptions = []
    maxlen = 0

    for rawline in inp:
        line = rawline.strip()
        excm = exc_re.match(line)
        if excm is None:
            continue
        exc = excm.group('name')
        exceptions.append(exc)
        if len(exc) > maxlen:
            maxlen = len(exc)

    print header

    print 'type _exc struct {'
    for exception in exceptions:
        print '\t%s%s *BaseException' % (exception, ' ' * (maxlen - len(exception)))
    print '}\n'

    print 'func _get_exceptions() _exc {'
    print '\treturn _exc{'
    for exception in exceptions:
        print '\t\tnewException(C.PyExc_%s),' % exception
    print '\t}'
    print '}\n'

    for exception in exceptions:
        print '// New%s creates a new Error that wraps a %s exception,' \
              % (exception, exception)
        print '// with value as it\'s value'
        print 'func New%s(value Object) *Error {' % exception
        print '\treturn NewError(Exc.%s, value)' % exception
        print '}'
        print '// New%sString creates a new Error that wraps a %s exception,' \
              % (exception, exception)
        print '// with a String containing msg as it\'s value'
        print 'func New%sString(msg string) *Error {' % exception
        print '\treturn NewErrorString(Exc.%s, msg)' % exception
        print '}'
        print '// New%sFormat creates a new Error that wraps a %s exception,' \
              % (exception, exception)
        print '// with a String containing the result of ' \
              'fmt.Sprintf(format, args...)'
        print '// as it\'s value'
        print 'func New%sFormat(format string, args ...interface{}) *Error {' % exception
        print '\treturn NewErrorFormat(Exc.%s, format, args...)' % exception
        print '}\n'

def main():
    cmd = ["gcc", "-E", "-o", "-", "utils.c"] + get_ffi_flags()
    p = subprocess.Popen(cmd, stdout=subprocess.PIPE)
    t = threading.Thread(target=process, args=(p.stdout,))
    t.start()
    p.wait()
    t.join()

if __name__ == "__main__":
    main()
