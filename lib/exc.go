// Copyright 2011 Julian Phillips.  All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// This file is automatically generated.  To regenerate:
//   ./gen_exc.py | gofmt > exc.go

package py

// #include "utils.h"
import "C"

type _exc struct {
	BaseException             *BaseException
	Exception                 *BaseException
	StopIteration             *BaseException
	GeneratorExit             *BaseException
	StandardError             *BaseException
	ArithmeticError           *BaseException
	LookupError               *BaseException
	AssertionError            *BaseException
	AttributeError            *BaseException
	EOFError                  *BaseException
	FloatingPointError        *BaseException
	EnvironmentError          *BaseException
	IOError                   *BaseException
	OSError                   *BaseException
	ImportError               *BaseException
	IndexError                *BaseException
	KeyError                  *BaseException
	KeyboardInterrupt         *BaseException
	MemoryError               *BaseException
	NameError                 *BaseException
	OverflowError             *BaseException
	RuntimeError              *BaseException
	NotImplementedError       *BaseException
	SyntaxError               *BaseException
	IndentationError          *BaseException
	TabError                  *BaseException
	ReferenceError            *BaseException
	SystemError               *BaseException
	SystemExit                *BaseException
	TypeError                 *BaseException
	UnboundLocalError         *BaseException
	UnicodeError              *BaseException
	UnicodeEncodeError        *BaseException
	UnicodeDecodeError        *BaseException
	UnicodeTranslateError     *BaseException
	ValueError                *BaseException
	ZeroDivisionError         *BaseException
	BufferError               *BaseException
	MemoryErrorInst           *BaseException
	RecursionErrorInst        *BaseException
	Warning                   *BaseException
	UserWarning               *BaseException
	DeprecationWarning        *BaseException
	PendingDeprecationWarning *BaseException
	SyntaxWarning             *BaseException
	RuntimeWarning            *BaseException
	FutureWarning             *BaseException
	ImportWarning             *BaseException
	UnicodeWarning            *BaseException
	BytesWarning              *BaseException
}

func _get_exceptions() _exc {
	return _exc{
		newException(C.PyExc_BaseException),
		newException(C.PyExc_Exception),
		newException(C.PyExc_StopIteration),
		newException(C.PyExc_GeneratorExit),
		newException(C.PyExc_StandardError),
		newException(C.PyExc_ArithmeticError),
		newException(C.PyExc_LookupError),
		newException(C.PyExc_AssertionError),
		newException(C.PyExc_AttributeError),
		newException(C.PyExc_EOFError),
		newException(C.PyExc_FloatingPointError),
		newException(C.PyExc_EnvironmentError),
		newException(C.PyExc_IOError),
		newException(C.PyExc_OSError),
		newException(C.PyExc_ImportError),
		newException(C.PyExc_IndexError),
		newException(C.PyExc_KeyError),
		newException(C.PyExc_KeyboardInterrupt),
		newException(C.PyExc_MemoryError),
		newException(C.PyExc_NameError),
		newException(C.PyExc_OverflowError),
		newException(C.PyExc_RuntimeError),
		newException(C.PyExc_NotImplementedError),
		newException(C.PyExc_SyntaxError),
		newException(C.PyExc_IndentationError),
		newException(C.PyExc_TabError),
		newException(C.PyExc_ReferenceError),
		newException(C.PyExc_SystemError),
		newException(C.PyExc_SystemExit),
		newException(C.PyExc_TypeError),
		newException(C.PyExc_UnboundLocalError),
		newException(C.PyExc_UnicodeError),
		newException(C.PyExc_UnicodeEncodeError),
		newException(C.PyExc_UnicodeDecodeError),
		newException(C.PyExc_UnicodeTranslateError),
		newException(C.PyExc_ValueError),
		newException(C.PyExc_ZeroDivisionError),
		newException(C.PyExc_BufferError),
		newException(C.PyExc_MemoryErrorInst),
		newException(C.PyExc_RecursionErrorInst),
		newException(C.PyExc_Warning),
		newException(C.PyExc_UserWarning),
		newException(C.PyExc_DeprecationWarning),
		newException(C.PyExc_PendingDeprecationWarning),
		newException(C.PyExc_SyntaxWarning),
		newException(C.PyExc_RuntimeWarning),
		newException(C.PyExc_FutureWarning),
		newException(C.PyExc_ImportWarning),
		newException(C.PyExc_UnicodeWarning),
		newException(C.PyExc_BytesWarning),
	}
}

// NewBaseException creates a new Error that wraps a BaseException exception,
// with value as it's value
func NewBaseException(value Object) *Error {
	return NewError(Exc.BaseException, value)
}

// NewBaseExceptionString creates a new Error that wraps a BaseException exception,
// with a String containing msg as it's value
func NewBaseExceptionString(msg string) *Error {
	return NewErrorString(Exc.BaseException, msg)
}

// NewBaseExceptionFormat creates a new Error that wraps a BaseException exception,
// with a String containing the result of fmt.Sprintf(format, args...)
// as it's value
func NewBaseExceptionFormat(format string, args ...interface{}) *Error {
	return NewErrorFormat(Exc.BaseException, format, args...)
}

// NewException creates a new Error that wraps a Exception exception,
// with value as it's value
func NewException(value Object) *Error {
	return NewError(Exc.Exception, value)
}

// NewExceptionString creates a new Error that wraps a Exception exception,
// with a String containing msg as it's value
func NewExceptionString(msg string) *Error {
	return NewErrorString(Exc.Exception, msg)
}

// NewExceptionFormat creates a new Error that wraps a Exception exception,
// with a String containing the result of fmt.Sprintf(format, args...)
// as it's value
func NewExceptionFormat(format string, args ...interface{}) *Error {
	return NewErrorFormat(Exc.Exception, format, args...)
}

// NewStopIteration creates a new Error that wraps a StopIteration exception,
// with value as it's value
func NewStopIteration(value Object) *Error {
	return NewError(Exc.StopIteration, value)
}

// NewStopIterationString creates a new Error that wraps a StopIteration exception,
// with a String containing msg as it's value
func NewStopIterationString(msg string) *Error {
	return NewErrorString(Exc.StopIteration, msg)
}

// NewStopIterationFormat creates a new Error that wraps a StopIteration exception,
// with a String containing the result of fmt.Sprintf(format, args...)
// as it's value
func NewStopIterationFormat(format string, args ...interface{}) *Error {
	return NewErrorFormat(Exc.StopIteration, format, args...)
}

// NewGeneratorExit creates a new Error that wraps a GeneratorExit exception,
// with value as it's value
func NewGeneratorExit(value Object) *Error {
	return NewError(Exc.GeneratorExit, value)
}

// NewGeneratorExitString creates a new Error that wraps a GeneratorExit exception,
// with a String containing msg as it's value
func NewGeneratorExitString(msg string) *Error {
	return NewErrorString(Exc.GeneratorExit, msg)
}

// NewGeneratorExitFormat creates a new Error that wraps a GeneratorExit exception,
// with a String containing the result of fmt.Sprintf(format, args...)
// as it's value
func NewGeneratorExitFormat(format string, args ...interface{}) *Error {
	return NewErrorFormat(Exc.GeneratorExit, format, args...)
}

// NewStandardError creates a new Error that wraps a StandardError exception,
// with value as it's value
func NewStandardError(value Object) *Error {
	return NewError(Exc.StandardError, value)
}

// NewStandardErrorString creates a new Error that wraps a StandardError exception,
// with a String containing msg as it's value
func NewStandardErrorString(msg string) *Error {
	return NewErrorString(Exc.StandardError, msg)
}

// NewStandardErrorFormat creates a new Error that wraps a StandardError exception,
// with a String containing the result of fmt.Sprintf(format, args...)
// as it's value
func NewStandardErrorFormat(format string, args ...interface{}) *Error {
	return NewErrorFormat(Exc.StandardError, format, args...)
}

// NewArithmeticError creates a new Error that wraps a ArithmeticError exception,
// with value as it's value
func NewArithmeticError(value Object) *Error {
	return NewError(Exc.ArithmeticError, value)
}

// NewArithmeticErrorString creates a new Error that wraps a ArithmeticError exception,
// with a String containing msg as it's value
func NewArithmeticErrorString(msg string) *Error {
	return NewErrorString(Exc.ArithmeticError, msg)
}

// NewArithmeticErrorFormat creates a new Error that wraps a ArithmeticError exception,
// with a String containing the result of fmt.Sprintf(format, args...)
// as it's value
func NewArithmeticErrorFormat(format string, args ...interface{}) *Error {
	return NewErrorFormat(Exc.ArithmeticError, format, args...)
}

// NewLookupError creates a new Error that wraps a LookupError exception,
// with value as it's value
func NewLookupError(value Object) *Error {
	return NewError(Exc.LookupError, value)
}

// NewLookupErrorString creates a new Error that wraps a LookupError exception,
// with a String containing msg as it's value
func NewLookupErrorString(msg string) *Error {
	return NewErrorString(Exc.LookupError, msg)
}

// NewLookupErrorFormat creates a new Error that wraps a LookupError exception,
// with a String containing the result of fmt.Sprintf(format, args...)
// as it's value
func NewLookupErrorFormat(format string, args ...interface{}) *Error {
	return NewErrorFormat(Exc.LookupError, format, args...)
}

// NewAssertionError creates a new Error that wraps a AssertionError exception,
// with value as it's value
func NewAssertionError(value Object) *Error {
	return NewError(Exc.AssertionError, value)
}

// NewAssertionErrorString creates a new Error that wraps a AssertionError exception,
// with a String containing msg as it's value
func NewAssertionErrorString(msg string) *Error {
	return NewErrorString(Exc.AssertionError, msg)
}

// NewAssertionErrorFormat creates a new Error that wraps a AssertionError exception,
// with a String containing the result of fmt.Sprintf(format, args...)
// as it's value
func NewAssertionErrorFormat(format string, args ...interface{}) *Error {
	return NewErrorFormat(Exc.AssertionError, format, args...)
}

// NewAttributeError creates a new Error that wraps a AttributeError exception,
// with value as it's value
func NewAttributeError(value Object) *Error {
	return NewError(Exc.AttributeError, value)
}

// NewAttributeErrorString creates a new Error that wraps a AttributeError exception,
// with a String containing msg as it's value
func NewAttributeErrorString(msg string) *Error {
	return NewErrorString(Exc.AttributeError, msg)
}

// NewAttributeErrorFormat creates a new Error that wraps a AttributeError exception,
// with a String containing the result of fmt.Sprintf(format, args...)
// as it's value
func NewAttributeErrorFormat(format string, args ...interface{}) *Error {
	return NewErrorFormat(Exc.AttributeError, format, args...)
}

// NewEOFError creates a new Error that wraps a EOFError exception,
// with value as it's value
func NewEOFError(value Object) *Error {
	return NewError(Exc.EOFError, value)
}

// NewEOFErrorString creates a new Error that wraps a EOFError exception,
// with a String containing msg as it's value
func NewEOFErrorString(msg string) *Error {
	return NewErrorString(Exc.EOFError, msg)
}

// NewEOFErrorFormat creates a new Error that wraps a EOFError exception,
// with a String containing the result of fmt.Sprintf(format, args...)
// as it's value
func NewEOFErrorFormat(format string, args ...interface{}) *Error {
	return NewErrorFormat(Exc.EOFError, format, args...)
}

// NewFloatingPointError creates a new Error that wraps a FloatingPointError exception,
// with value as it's value
func NewFloatingPointError(value Object) *Error {
	return NewError(Exc.FloatingPointError, value)
}

// NewFloatingPointErrorString creates a new Error that wraps a FloatingPointError exception,
// with a String containing msg as it's value
func NewFloatingPointErrorString(msg string) *Error {
	return NewErrorString(Exc.FloatingPointError, msg)
}

// NewFloatingPointErrorFormat creates a new Error that wraps a FloatingPointError exception,
// with a String containing the result of fmt.Sprintf(format, args...)
// as it's value
func NewFloatingPointErrorFormat(format string, args ...interface{}) *Error {
	return NewErrorFormat(Exc.FloatingPointError, format, args...)
}

// NewEnvironmentError creates a new Error that wraps a EnvironmentError exception,
// with value as it's value
func NewEnvironmentError(value Object) *Error {
	return NewError(Exc.EnvironmentError, value)
}

// NewEnvironmentErrorString creates a new Error that wraps a EnvironmentError exception,
// with a String containing msg as it's value
func NewEnvironmentErrorString(msg string) *Error {
	return NewErrorString(Exc.EnvironmentError, msg)
}

// NewEnvironmentErrorFormat creates a new Error that wraps a EnvironmentError exception,
// with a String containing the result of fmt.Sprintf(format, args...)
// as it's value
func NewEnvironmentErrorFormat(format string, args ...interface{}) *Error {
	return NewErrorFormat(Exc.EnvironmentError, format, args...)
}

// NewIOError creates a new Error that wraps a IOError exception,
// with value as it's value
func NewIOError(value Object) *Error {
	return NewError(Exc.IOError, value)
}

// NewIOErrorString creates a new Error that wraps a IOError exception,
// with a String containing msg as it's value
func NewIOErrorString(msg string) *Error {
	return NewErrorString(Exc.IOError, msg)
}

// NewIOErrorFormat creates a new Error that wraps a IOError exception,
// with a String containing the result of fmt.Sprintf(format, args...)
// as it's value
func NewIOErrorFormat(format string, args ...interface{}) *Error {
	return NewErrorFormat(Exc.IOError, format, args...)
}

// NewOSError creates a new Error that wraps a OSError exception,
// with value as it's value
func NewOSError(value Object) *Error {
	return NewError(Exc.OSError, value)
}

// NewOSErrorString creates a new Error that wraps a OSError exception,
// with a String containing msg as it's value
func NewOSErrorString(msg string) *Error {
	return NewErrorString(Exc.OSError, msg)
}

// NewOSErrorFormat creates a new Error that wraps a OSError exception,
// with a String containing the result of fmt.Sprintf(format, args...)
// as it's value
func NewOSErrorFormat(format string, args ...interface{}) *Error {
	return NewErrorFormat(Exc.OSError, format, args...)
}

// NewImportError creates a new Error that wraps a ImportError exception,
// with value as it's value
func NewImportError(value Object) *Error {
	return NewError(Exc.ImportError, value)
}

// NewImportErrorString creates a new Error that wraps a ImportError exception,
// with a String containing msg as it's value
func NewImportErrorString(msg string) *Error {
	return NewErrorString(Exc.ImportError, msg)
}

// NewImportErrorFormat creates a new Error that wraps a ImportError exception,
// with a String containing the result of fmt.Sprintf(format, args...)
// as it's value
func NewImportErrorFormat(format string, args ...interface{}) *Error {
	return NewErrorFormat(Exc.ImportError, format, args...)
}

// NewIndexError creates a new Error that wraps a IndexError exception,
// with value as it's value
func NewIndexError(value Object) *Error {
	return NewError(Exc.IndexError, value)
}

// NewIndexErrorString creates a new Error that wraps a IndexError exception,
// with a String containing msg as it's value
func NewIndexErrorString(msg string) *Error {
	return NewErrorString(Exc.IndexError, msg)
}

// NewIndexErrorFormat creates a new Error that wraps a IndexError exception,
// with a String containing the result of fmt.Sprintf(format, args...)
// as it's value
func NewIndexErrorFormat(format string, args ...interface{}) *Error {
	return NewErrorFormat(Exc.IndexError, format, args...)
}

// NewKeyError creates a new Error that wraps a KeyError exception,
// with value as it's value
func NewKeyError(value Object) *Error {
	return NewError(Exc.KeyError, value)
}

// NewKeyErrorString creates a new Error that wraps a KeyError exception,
// with a String containing msg as it's value
func NewKeyErrorString(msg string) *Error {
	return NewErrorString(Exc.KeyError, msg)
}

// NewKeyErrorFormat creates a new Error that wraps a KeyError exception,
// with a String containing the result of fmt.Sprintf(format, args...)
// as it's value
func NewKeyErrorFormat(format string, args ...interface{}) *Error {
	return NewErrorFormat(Exc.KeyError, format, args...)
}

// NewKeyboardInterrupt creates a new Error that wraps a KeyboardInterrupt exception,
// with value as it's value
func NewKeyboardInterrupt(value Object) *Error {
	return NewError(Exc.KeyboardInterrupt, value)
}

// NewKeyboardInterruptString creates a new Error that wraps a KeyboardInterrupt exception,
// with a String containing msg as it's value
func NewKeyboardInterruptString(msg string) *Error {
	return NewErrorString(Exc.KeyboardInterrupt, msg)
}

// NewKeyboardInterruptFormat creates a new Error that wraps a KeyboardInterrupt exception,
// with a String containing the result of fmt.Sprintf(format, args...)
// as it's value
func NewKeyboardInterruptFormat(format string, args ...interface{}) *Error {
	return NewErrorFormat(Exc.KeyboardInterrupt, format, args...)
}

// NewMemoryError creates a new Error that wraps a MemoryError exception,
// with value as it's value
func NewMemoryError(value Object) *Error {
	return NewError(Exc.MemoryError, value)
}

// NewMemoryErrorString creates a new Error that wraps a MemoryError exception,
// with a String containing msg as it's value
func NewMemoryErrorString(msg string) *Error {
	return NewErrorString(Exc.MemoryError, msg)
}

// NewMemoryErrorFormat creates a new Error that wraps a MemoryError exception,
// with a String containing the result of fmt.Sprintf(format, args...)
// as it's value
func NewMemoryErrorFormat(format string, args ...interface{}) *Error {
	return NewErrorFormat(Exc.MemoryError, format, args...)
}

// NewNameError creates a new Error that wraps a NameError exception,
// with value as it's value
func NewNameError(value Object) *Error {
	return NewError(Exc.NameError, value)
}

// NewNameErrorString creates a new Error that wraps a NameError exception,
// with a String containing msg as it's value
func NewNameErrorString(msg string) *Error {
	return NewErrorString(Exc.NameError, msg)
}

// NewNameErrorFormat creates a new Error that wraps a NameError exception,
// with a String containing the result of fmt.Sprintf(format, args...)
// as it's value
func NewNameErrorFormat(format string, args ...interface{}) *Error {
	return NewErrorFormat(Exc.NameError, format, args...)
}

// NewOverflowError creates a new Error that wraps a OverflowError exception,
// with value as it's value
func NewOverflowError(value Object) *Error {
	return NewError(Exc.OverflowError, value)
}

// NewOverflowErrorString creates a new Error that wraps a OverflowError exception,
// with a String containing msg as it's value
func NewOverflowErrorString(msg string) *Error {
	return NewErrorString(Exc.OverflowError, msg)
}

// NewOverflowErrorFormat creates a new Error that wraps a OverflowError exception,
// with a String containing the result of fmt.Sprintf(format, args...)
// as it's value
func NewOverflowErrorFormat(format string, args ...interface{}) *Error {
	return NewErrorFormat(Exc.OverflowError, format, args...)
}

// NewRuntimeError creates a new Error that wraps a RuntimeError exception,
// with value as it's value
func NewRuntimeError(value Object) *Error {
	return NewError(Exc.RuntimeError, value)
}

// NewRuntimeErrorString creates a new Error that wraps a RuntimeError exception,
// with a String containing msg as it's value
func NewRuntimeErrorString(msg string) *Error {
	return NewErrorString(Exc.RuntimeError, msg)
}

// NewRuntimeErrorFormat creates a new Error that wraps a RuntimeError exception,
// with a String containing the result of fmt.Sprintf(format, args...)
// as it's value
func NewRuntimeErrorFormat(format string, args ...interface{}) *Error {
	return NewErrorFormat(Exc.RuntimeError, format, args...)
}

// NewNotImplementedError creates a new Error that wraps a NotImplementedError exception,
// with value as it's value
func NewNotImplementedError(value Object) *Error {
	return NewError(Exc.NotImplementedError, value)
}

// NewNotImplementedErrorString creates a new Error that wraps a NotImplementedError exception,
// with a String containing msg as it's value
func NewNotImplementedErrorString(msg string) *Error {
	return NewErrorString(Exc.NotImplementedError, msg)
}

// NewNotImplementedErrorFormat creates a new Error that wraps a NotImplementedError exception,
// with a String containing the result of fmt.Sprintf(format, args...)
// as it's value
func NewNotImplementedErrorFormat(format string, args ...interface{}) *Error {
	return NewErrorFormat(Exc.NotImplementedError, format, args...)
}

// NewSyntaxError creates a new Error that wraps a SyntaxError exception,
// with value as it's value
func NewSyntaxError(value Object) *Error {
	return NewError(Exc.SyntaxError, value)
}

// NewSyntaxErrorString creates a new Error that wraps a SyntaxError exception,
// with a String containing msg as it's value
func NewSyntaxErrorString(msg string) *Error {
	return NewErrorString(Exc.SyntaxError, msg)
}

// NewSyntaxErrorFormat creates a new Error that wraps a SyntaxError exception,
// with a String containing the result of fmt.Sprintf(format, args...)
// as it's value
func NewSyntaxErrorFormat(format string, args ...interface{}) *Error {
	return NewErrorFormat(Exc.SyntaxError, format, args...)
}

// NewIndentationError creates a new Error that wraps a IndentationError exception,
// with value as it's value
func NewIndentationError(value Object) *Error {
	return NewError(Exc.IndentationError, value)
}

// NewIndentationErrorString creates a new Error that wraps a IndentationError exception,
// with a String containing msg as it's value
func NewIndentationErrorString(msg string) *Error {
	return NewErrorString(Exc.IndentationError, msg)
}

// NewIndentationErrorFormat creates a new Error that wraps a IndentationError exception,
// with a String containing the result of fmt.Sprintf(format, args...)
// as it's value
func NewIndentationErrorFormat(format string, args ...interface{}) *Error {
	return NewErrorFormat(Exc.IndentationError, format, args...)
}

// NewTabError creates a new Error that wraps a TabError exception,
// with value as it's value
func NewTabError(value Object) *Error {
	return NewError(Exc.TabError, value)
}

// NewTabErrorString creates a new Error that wraps a TabError exception,
// with a String containing msg as it's value
func NewTabErrorString(msg string) *Error {
	return NewErrorString(Exc.TabError, msg)
}

// NewTabErrorFormat creates a new Error that wraps a TabError exception,
// with a String containing the result of fmt.Sprintf(format, args...)
// as it's value
func NewTabErrorFormat(format string, args ...interface{}) *Error {
	return NewErrorFormat(Exc.TabError, format, args...)
}

// NewReferenceError creates a new Error that wraps a ReferenceError exception,
// with value as it's value
func NewReferenceError(value Object) *Error {
	return NewError(Exc.ReferenceError, value)
}

// NewReferenceErrorString creates a new Error that wraps a ReferenceError exception,
// with a String containing msg as it's value
func NewReferenceErrorString(msg string) *Error {
	return NewErrorString(Exc.ReferenceError, msg)
}

// NewReferenceErrorFormat creates a new Error that wraps a ReferenceError exception,
// with a String containing the result of fmt.Sprintf(format, args...)
// as it's value
func NewReferenceErrorFormat(format string, args ...interface{}) *Error {
	return NewErrorFormat(Exc.ReferenceError, format, args...)
}

// NewSystemError creates a new Error that wraps a SystemError exception,
// with value as it's value
func NewSystemError(value Object) *Error {
	return NewError(Exc.SystemError, value)
}

// NewSystemErrorString creates a new Error that wraps a SystemError exception,
// with a String containing msg as it's value
func NewSystemErrorString(msg string) *Error {
	return NewErrorString(Exc.SystemError, msg)
}

// NewSystemErrorFormat creates a new Error that wraps a SystemError exception,
// with a String containing the result of fmt.Sprintf(format, args...)
// as it's value
func NewSystemErrorFormat(format string, args ...interface{}) *Error {
	return NewErrorFormat(Exc.SystemError, format, args...)
}

// NewSystemExit creates a new Error that wraps a SystemExit exception,
// with value as it's value
func NewSystemExit(value Object) *Error {
	return NewError(Exc.SystemExit, value)
}

// NewSystemExitString creates a new Error that wraps a SystemExit exception,
// with a String containing msg as it's value
func NewSystemExitString(msg string) *Error {
	return NewErrorString(Exc.SystemExit, msg)
}

// NewSystemExitFormat creates a new Error that wraps a SystemExit exception,
// with a String containing the result of fmt.Sprintf(format, args...)
// as it's value
func NewSystemExitFormat(format string, args ...interface{}) *Error {
	return NewErrorFormat(Exc.SystemExit, format, args...)
}

// NewTypeError creates a new Error that wraps a TypeError exception,
// with value as it's value
func NewTypeError(value Object) *Error {
	return NewError(Exc.TypeError, value)
}

// NewTypeErrorString creates a new Error that wraps a TypeError exception,
// with a String containing msg as it's value
func NewTypeErrorString(msg string) *Error {
	return NewErrorString(Exc.TypeError, msg)
}

// NewTypeErrorFormat creates a new Error that wraps a TypeError exception,
// with a String containing the result of fmt.Sprintf(format, args...)
// as it's value
func NewTypeErrorFormat(format string, args ...interface{}) *Error {
	return NewErrorFormat(Exc.TypeError, format, args...)
}

// NewUnboundLocalError creates a new Error that wraps a UnboundLocalError exception,
// with value as it's value
func NewUnboundLocalError(value Object) *Error {
	return NewError(Exc.UnboundLocalError, value)
}

// NewUnboundLocalErrorString creates a new Error that wraps a UnboundLocalError exception,
// with a String containing msg as it's value
func NewUnboundLocalErrorString(msg string) *Error {
	return NewErrorString(Exc.UnboundLocalError, msg)
}

// NewUnboundLocalErrorFormat creates a new Error that wraps a UnboundLocalError exception,
// with a String containing the result of fmt.Sprintf(format, args...)
// as it's value
func NewUnboundLocalErrorFormat(format string, args ...interface{}) *Error {
	return NewErrorFormat(Exc.UnboundLocalError, format, args...)
}

// NewUnicodeError creates a new Error that wraps a UnicodeError exception,
// with value as it's value
func NewUnicodeError(value Object) *Error {
	return NewError(Exc.UnicodeError, value)
}

// NewUnicodeErrorString creates a new Error that wraps a UnicodeError exception,
// with a String containing msg as it's value
func NewUnicodeErrorString(msg string) *Error {
	return NewErrorString(Exc.UnicodeError, msg)
}

// NewUnicodeErrorFormat creates a new Error that wraps a UnicodeError exception,
// with a String containing the result of fmt.Sprintf(format, args...)
// as it's value
func NewUnicodeErrorFormat(format string, args ...interface{}) *Error {
	return NewErrorFormat(Exc.UnicodeError, format, args...)
}

// NewUnicodeEncodeError creates a new Error that wraps a UnicodeEncodeError exception,
// with value as it's value
func NewUnicodeEncodeError(value Object) *Error {
	return NewError(Exc.UnicodeEncodeError, value)
}

// NewUnicodeEncodeErrorString creates a new Error that wraps a UnicodeEncodeError exception,
// with a String containing msg as it's value
func NewUnicodeEncodeErrorString(msg string) *Error {
	return NewErrorString(Exc.UnicodeEncodeError, msg)
}

// NewUnicodeEncodeErrorFormat creates a new Error that wraps a UnicodeEncodeError exception,
// with a String containing the result of fmt.Sprintf(format, args...)
// as it's value
func NewUnicodeEncodeErrorFormat(format string, args ...interface{}) *Error {
	return NewErrorFormat(Exc.UnicodeEncodeError, format, args...)
}

// NewUnicodeDecodeError creates a new Error that wraps a UnicodeDecodeError exception,
// with value as it's value
func NewUnicodeDecodeError(value Object) *Error {
	return NewError(Exc.UnicodeDecodeError, value)
}

// NewUnicodeDecodeErrorString creates a new Error that wraps a UnicodeDecodeError exception,
// with a String containing msg as it's value
func NewUnicodeDecodeErrorString(msg string) *Error {
	return NewErrorString(Exc.UnicodeDecodeError, msg)
}

// NewUnicodeDecodeErrorFormat creates a new Error that wraps a UnicodeDecodeError exception,
// with a String containing the result of fmt.Sprintf(format, args...)
// as it's value
func NewUnicodeDecodeErrorFormat(format string, args ...interface{}) *Error {
	return NewErrorFormat(Exc.UnicodeDecodeError, format, args...)
}

// NewUnicodeTranslateError creates a new Error that wraps a UnicodeTranslateError exception,
// with value as it's value
func NewUnicodeTranslateError(value Object) *Error {
	return NewError(Exc.UnicodeTranslateError, value)
}

// NewUnicodeTranslateErrorString creates a new Error that wraps a UnicodeTranslateError exception,
// with a String containing msg as it's value
func NewUnicodeTranslateErrorString(msg string) *Error {
	return NewErrorString(Exc.UnicodeTranslateError, msg)
}

// NewUnicodeTranslateErrorFormat creates a new Error that wraps a UnicodeTranslateError exception,
// with a String containing the result of fmt.Sprintf(format, args...)
// as it's value
func NewUnicodeTranslateErrorFormat(format string, args ...interface{}) *Error {
	return NewErrorFormat(Exc.UnicodeTranslateError, format, args...)
}

// NewValueError creates a new Error that wraps a ValueError exception,
// with value as it's value
func NewValueError(value Object) *Error {
	return NewError(Exc.ValueError, value)
}

// NewValueErrorString creates a new Error that wraps a ValueError exception,
// with a String containing msg as it's value
func NewValueErrorString(msg string) *Error {
	return NewErrorString(Exc.ValueError, msg)
}

// NewValueErrorFormat creates a new Error that wraps a ValueError exception,
// with a String containing the result of fmt.Sprintf(format, args...)
// as it's value
func NewValueErrorFormat(format string, args ...interface{}) *Error {
	return NewErrorFormat(Exc.ValueError, format, args...)
}

// NewZeroDivisionError creates a new Error that wraps a ZeroDivisionError exception,
// with value as it's value
func NewZeroDivisionError(value Object) *Error {
	return NewError(Exc.ZeroDivisionError, value)
}

// NewZeroDivisionErrorString creates a new Error that wraps a ZeroDivisionError exception,
// with a String containing msg as it's value
func NewZeroDivisionErrorString(msg string) *Error {
	return NewErrorString(Exc.ZeroDivisionError, msg)
}

// NewZeroDivisionErrorFormat creates a new Error that wraps a ZeroDivisionError exception,
// with a String containing the result of fmt.Sprintf(format, args...)
// as it's value
func NewZeroDivisionErrorFormat(format string, args ...interface{}) *Error {
	return NewErrorFormat(Exc.ZeroDivisionError, format, args...)
}

// NewBufferError creates a new Error that wraps a BufferError exception,
// with value as it's value
func NewBufferError(value Object) *Error {
	return NewError(Exc.BufferError, value)
}

// NewBufferErrorString creates a new Error that wraps a BufferError exception,
// with a String containing msg as it's value
func NewBufferErrorString(msg string) *Error {
	return NewErrorString(Exc.BufferError, msg)
}

// NewBufferErrorFormat creates a new Error that wraps a BufferError exception,
// with a String containing the result of fmt.Sprintf(format, args...)
// as it's value
func NewBufferErrorFormat(format string, args ...interface{}) *Error {
	return NewErrorFormat(Exc.BufferError, format, args...)
}

// NewMemoryErrorInst creates a new Error that wraps a MemoryErrorInst exception,
// with value as it's value
func NewMemoryErrorInst(value Object) *Error {
	return NewError(Exc.MemoryErrorInst, value)
}

// NewMemoryErrorInstString creates a new Error that wraps a MemoryErrorInst exception,
// with a String containing msg as it's value
func NewMemoryErrorInstString(msg string) *Error {
	return NewErrorString(Exc.MemoryErrorInst, msg)
}

// NewMemoryErrorInstFormat creates a new Error that wraps a MemoryErrorInst exception,
// with a String containing the result of fmt.Sprintf(format, args...)
// as it's value
func NewMemoryErrorInstFormat(format string, args ...interface{}) *Error {
	return NewErrorFormat(Exc.MemoryErrorInst, format, args...)
}

// NewRecursionErrorInst creates a new Error that wraps a RecursionErrorInst exception,
// with value as it's value
func NewRecursionErrorInst(value Object) *Error {
	return NewError(Exc.RecursionErrorInst, value)
}

// NewRecursionErrorInstString creates a new Error that wraps a RecursionErrorInst exception,
// with a String containing msg as it's value
func NewRecursionErrorInstString(msg string) *Error {
	return NewErrorString(Exc.RecursionErrorInst, msg)
}

// NewRecursionErrorInstFormat creates a new Error that wraps a RecursionErrorInst exception,
// with a String containing the result of fmt.Sprintf(format, args...)
// as it's value
func NewRecursionErrorInstFormat(format string, args ...interface{}) *Error {
	return NewErrorFormat(Exc.RecursionErrorInst, format, args...)
}

// NewWarning creates a new Error that wraps a Warning exception,
// with value as it's value
func NewWarning(value Object) *Error {
	return NewError(Exc.Warning, value)
}

// NewWarningString creates a new Error that wraps a Warning exception,
// with a String containing msg as it's value
func NewWarningString(msg string) *Error {
	return NewErrorString(Exc.Warning, msg)
}

// NewWarningFormat creates a new Error that wraps a Warning exception,
// with a String containing the result of fmt.Sprintf(format, args...)
// as it's value
func NewWarningFormat(format string, args ...interface{}) *Error {
	return NewErrorFormat(Exc.Warning, format, args...)
}

// NewUserWarning creates a new Error that wraps a UserWarning exception,
// with value as it's value
func NewUserWarning(value Object) *Error {
	return NewError(Exc.UserWarning, value)
}

// NewUserWarningString creates a new Error that wraps a UserWarning exception,
// with a String containing msg as it's value
func NewUserWarningString(msg string) *Error {
	return NewErrorString(Exc.UserWarning, msg)
}

// NewUserWarningFormat creates a new Error that wraps a UserWarning exception,
// with a String containing the result of fmt.Sprintf(format, args...)
// as it's value
func NewUserWarningFormat(format string, args ...interface{}) *Error {
	return NewErrorFormat(Exc.UserWarning, format, args...)
}

// NewDeprecationWarning creates a new Error that wraps a DeprecationWarning exception,
// with value as it's value
func NewDeprecationWarning(value Object) *Error {
	return NewError(Exc.DeprecationWarning, value)
}

// NewDeprecationWarningString creates a new Error that wraps a DeprecationWarning exception,
// with a String containing msg as it's value
func NewDeprecationWarningString(msg string) *Error {
	return NewErrorString(Exc.DeprecationWarning, msg)
}

// NewDeprecationWarningFormat creates a new Error that wraps a DeprecationWarning exception,
// with a String containing the result of fmt.Sprintf(format, args...)
// as it's value
func NewDeprecationWarningFormat(format string, args ...interface{}) *Error {
	return NewErrorFormat(Exc.DeprecationWarning, format, args...)
}

// NewPendingDeprecationWarning creates a new Error that wraps a PendingDeprecationWarning exception,
// with value as it's value
func NewPendingDeprecationWarning(value Object) *Error {
	return NewError(Exc.PendingDeprecationWarning, value)
}

// NewPendingDeprecationWarningString creates a new Error that wraps a PendingDeprecationWarning exception,
// with a String containing msg as it's value
func NewPendingDeprecationWarningString(msg string) *Error {
	return NewErrorString(Exc.PendingDeprecationWarning, msg)
}

// NewPendingDeprecationWarningFormat creates a new Error that wraps a PendingDeprecationWarning exception,
// with a String containing the result of fmt.Sprintf(format, args...)
// as it's value
func NewPendingDeprecationWarningFormat(format string, args ...interface{}) *Error {
	return NewErrorFormat(Exc.PendingDeprecationWarning, format, args...)
}

// NewSyntaxWarning creates a new Error that wraps a SyntaxWarning exception,
// with value as it's value
func NewSyntaxWarning(value Object) *Error {
	return NewError(Exc.SyntaxWarning, value)
}

// NewSyntaxWarningString creates a new Error that wraps a SyntaxWarning exception,
// with a String containing msg as it's value
func NewSyntaxWarningString(msg string) *Error {
	return NewErrorString(Exc.SyntaxWarning, msg)
}

// NewSyntaxWarningFormat creates a new Error that wraps a SyntaxWarning exception,
// with a String containing the result of fmt.Sprintf(format, args...)
// as it's value
func NewSyntaxWarningFormat(format string, args ...interface{}) *Error {
	return NewErrorFormat(Exc.SyntaxWarning, format, args...)
}

// NewRuntimeWarning creates a new Error that wraps a RuntimeWarning exception,
// with value as it's value
func NewRuntimeWarning(value Object) *Error {
	return NewError(Exc.RuntimeWarning, value)
}

// NewRuntimeWarningString creates a new Error that wraps a RuntimeWarning exception,
// with a String containing msg as it's value
func NewRuntimeWarningString(msg string) *Error {
	return NewErrorString(Exc.RuntimeWarning, msg)
}

// NewRuntimeWarningFormat creates a new Error that wraps a RuntimeWarning exception,
// with a String containing the result of fmt.Sprintf(format, args...)
// as it's value
func NewRuntimeWarningFormat(format string, args ...interface{}) *Error {
	return NewErrorFormat(Exc.RuntimeWarning, format, args...)
}

// NewFutureWarning creates a new Error that wraps a FutureWarning exception,
// with value as it's value
func NewFutureWarning(value Object) *Error {
	return NewError(Exc.FutureWarning, value)
}

// NewFutureWarningString creates a new Error that wraps a FutureWarning exception,
// with a String containing msg as it's value
func NewFutureWarningString(msg string) *Error {
	return NewErrorString(Exc.FutureWarning, msg)
}

// NewFutureWarningFormat creates a new Error that wraps a FutureWarning exception,
// with a String containing the result of fmt.Sprintf(format, args...)
// as it's value
func NewFutureWarningFormat(format string, args ...interface{}) *Error {
	return NewErrorFormat(Exc.FutureWarning, format, args...)
}

// NewImportWarning creates a new Error that wraps a ImportWarning exception,
// with value as it's value
func NewImportWarning(value Object) *Error {
	return NewError(Exc.ImportWarning, value)
}

// NewImportWarningString creates a new Error that wraps a ImportWarning exception,
// with a String containing msg as it's value
func NewImportWarningString(msg string) *Error {
	return NewErrorString(Exc.ImportWarning, msg)
}

// NewImportWarningFormat creates a new Error that wraps a ImportWarning exception,
// with a String containing the result of fmt.Sprintf(format, args...)
// as it's value
func NewImportWarningFormat(format string, args ...interface{}) *Error {
	return NewErrorFormat(Exc.ImportWarning, format, args...)
}

// NewUnicodeWarning creates a new Error that wraps a UnicodeWarning exception,
// with value as it's value
func NewUnicodeWarning(value Object) *Error {
	return NewError(Exc.UnicodeWarning, value)
}

// NewUnicodeWarningString creates a new Error that wraps a UnicodeWarning exception,
// with a String containing msg as it's value
func NewUnicodeWarningString(msg string) *Error {
	return NewErrorString(Exc.UnicodeWarning, msg)
}

// NewUnicodeWarningFormat creates a new Error that wraps a UnicodeWarning exception,
// with a String containing the result of fmt.Sprintf(format, args...)
// as it's value
func NewUnicodeWarningFormat(format string, args ...interface{}) *Error {
	return NewErrorFormat(Exc.UnicodeWarning, format, args...)
}

// NewBytesWarning creates a new Error that wraps a BytesWarning exception,
// with value as it's value
func NewBytesWarning(value Object) *Error {
	return NewError(Exc.BytesWarning, value)
}

// NewBytesWarningString creates a new Error that wraps a BytesWarning exception,
// with a String containing msg as it's value
func NewBytesWarningString(msg string) *Error {
	return NewErrorString(Exc.BytesWarning, msg)
}

// NewBytesWarningFormat creates a new Error that wraps a BytesWarning exception,
// with a String containing the result of fmt.Sprintf(format, args...)
// as it's value
func NewBytesWarningFormat(format string, args ...interface{}) *Error {
	return NewErrorFormat(Exc.BytesWarning, format, args...)
}
